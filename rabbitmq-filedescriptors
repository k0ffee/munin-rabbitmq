#! /usr/bin/env perl

use strict;
use warnings;

#
# A Munin plugin.
#
# RabbitMQ filedescriptor usage.
#

if (exists $ARGV[0] and $ARGV[0] eq 'autoconf') {
    print "yes\n";
    exit 0;
}

open(my $status, '-|', 'rabbitmqctl status') or die "Can't open: $!";

my @maxfdescr = ();
my @filedescr = ();

while (<$status>) {
    chomp;
    push @maxfdescr, $_ if /^\s*\{file_descriptors\s*,/ ...
                           /^\s*\[*\{total_limit\s*,/;
    push @filedescr, $_ if /^\s*\{file_descriptors\s*,/ ...
                           /^\s*\[*\{total_used\s*,/;
}

die 'Error: no data' unless @maxfdescr and @filedescr;

my $maxfdescr = $maxfdescr[-1];
$maxfdescr =~ s/\D//g;

die "Unexpected number: \$maxfdescr = \"$maxfdescr\""
    if $maxfdescr < 0;

my $filedescr = $filedescr[-1];
$filedescr =~ s/\D//g;

die "Unexpected number: \$filedescr = \"$filedescr\""
    if $filedescr < 0;
die "Error: \$maxfdescr smaller than \$filedescr: $maxfdescr $filedescr"
    if $maxfdescr < $filedescr;

if (exists $ARGV[0] and $ARGV[0] eq 'config') {
    print 'graph_args --base 1000 -l 0 --vertical-label Filedescriptors '
        . "--upper-limit $maxfdescr\n"
        . "graph_title RabbitMQ filedescriptor usage\n"
        . "graph_order used free\n"
        . "graph_category rabbitmq\n"
        . "used.label used\n"
        . "used.colour COLOUR2\n"
        . "used.draw AREA\n"
        . "free.label free\n"
        . "free.colour COLOUR18\n"
        . "free.draw STACK\n";
    exit;
}

print "free.value " . ($maxfdescr - $filedescr) . "\n";
print "used.value $filedescr\n";
